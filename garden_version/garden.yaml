kind: Project
name: f1-kafka-module
environments:
  - name: local
  - name: gke
providers:
  - name: local-kubernetes
    environments: [local]
    context: docker-desktop
  - name: kubernetes
    context: gke_th-structure-flow-demo_us-east1-b_stream-demo
    environments: [gke]
    deploymentRegistry:
      # The hostname of the registry, e.g. gcr.io for GCR (Google Container Registry)
      hostname: gcr.io
      # Namespace (aka project ID) to use in the registry for this project.
      # For GKE/GCR, use the project ID where your cluster is.
      namespace: th-structure-flow-demo
    imagePullSecrets:
      # The name of the secret you stored using `kubectl create secret docker-registry`
    - name: gcr-json-key
      # Change this if you store the secret in another namespace.
      namespace: default
---
kind: Module
type: kubernetes
name: zookeeper
description: Redis deployment with kubernetes manifests in a file ((extracted from the stable/redis Helm chart))
files: [zookeeper.yaml,zooservice.yaml]
---
kind: Module
type: kubernetes
name: broker
description: Redis deployment with kubernetes manifests in a file ((extracted from the stable/redis Helm chart))
files: [kafka-docker.yaml,kafka-service.yaml,udp-inbound-p3000-svc.yaml]
---
kind: Module
description: UDP Telemetry capture app
type: container
name: udp-app
disabled: false
services:
  - name: udp-app
    ports:
      - name: http
        containerPort: 8090
        servicePort: 8090
    ingresses:
      - path: /
        port: http
        hostname: http.local.app.garden
    dependencies:
      - broker    
    env:
      KAFKA_BOOTSTRAP_SERVERS_ENV: kafka-service:31234
      UDP_PORT: 20777
# tests:
#   - name: unit
#     command:
#       - /bin/sh
#       - '-c'
#     args: ["curl -v http://weather-app:8090/weather >out.txt"]
#     timeout: 30
#    dependencies: 
#      - telemetry-lib
---
# kind: Module
# type: exec
# name: telemetry-lib
#  #optional path spec
# build:
#   command: [mvn,package] #will run from shell, module directory!
# tests:
#   - name: local-test
#     command: [mvn,test] #whatever to test
# - name: vote
#     ports:
#       - name: http
#         containerPort: 8080
#     ingresses:
#       - path: /
#         port: http
#         hostname: vote.${var.baseHostname}
#     env:
#       HOSTNAME: vote.${var.baseHostname}
#     dependencies:
#       - api